@page "/users/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">New users</h3>
<a href="/users/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New User
</a>
<br />
<br />
@if (Users == null)
{
    <div class="alert alert-info">Loading Messsages...</div>
}
else
{
    <div class="table table-responsive">
        <table id="usersTable" class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Password</th>
                <th>Gender</th>
                <th>Status</th>
                <th>Birth</th>
                <th>Preferred gender</th>
                <th>Location</th>
                <th>Picture</th>
                

            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
            <tr>
                <td>@user.username</td>
                <td>@user.email</td>
                <td>@user.password</td>
                <td>@user.gender</td>
                <td>@user.Status</td>
                <td>@user.Birth.ToString("dd MMM yyyy")</td>
                <td>@user.GenderP</td>
                <td>@user.Location</td>
                <td><img style="width:100px;height:100px;" src="@user.image"/></td>

                <td>
                    <a href="users/view/@user.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>

                    </a>
                    <a href="/users/edit/@user.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(user.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
        </table>
    </div>}

}

@code {
    private List<User> Users;

    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndPoint}");
    }

    async Task Delete(int userID)
    {
        var user = Users.First(q => q.Id == userID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {user.username}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.UsersEndPoint}/{userID}");
            await OnInitializedAsync();
        }
    }
     protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#usersTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTableDispose", "#usersTable");
    }

}
