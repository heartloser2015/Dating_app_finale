@page "/locations/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]



<br />
<br />
@if (Locations == null)
{
    <div class="alert alert-info">Loading Messsages...</div>
}
else
{
    <div class="table table-responsive">
        <table id="locationTable" class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Locations</th>
                <th>Picture</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var location in Locations)
            {
            <tr>
                <td>@location.Id</td>
                <td>@location.name</td>
                <td>@location.Location_Gps</td>
                <td><img style="width:100px;height:100px;" src="@location.image" /></td>
                <td>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(location.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
</div>}

@code {
    private List<Location> Locations;

    protected async override Task OnInitializedAsync()
    {
        Locations = await _client.GetFromJsonAsync<List<Location>>($"{Endpoints.LocationsEndPoint}");
    }

    async Task Delete(int locationID)
    {
        var location = Locations.First(q => q.Id == locationID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {location.Location_Gps}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.LocationsEndPoint}/{locationID}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#locationTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTableDispose", "#locationTable");
    }
}
